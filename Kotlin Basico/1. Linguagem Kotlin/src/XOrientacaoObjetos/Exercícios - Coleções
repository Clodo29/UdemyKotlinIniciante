package exercices.collection

data class Cliente(val nome: String)
data class Produto(val nome: String, val preco: Double)
data class Loja(val nome: String)
data class Pedido(val produtos: List<Produto>, val cliente: Cliente, val loja: Loja)

class BaseDados {

    private val gabriel = Cliente("Gabriel")
    private val marcos = Cliente("Marcos")
    private val daniela = Cliente("Daniela")
    private val alex = Cliente("Alex")
    private val johnathan = Cliente("Johnathan")
    private val aurelio = Cliente("Aurelio")
    private val fernando = Cliente("Fernando")
    private val amanda = Cliente("Amanda")
    private val paula = Cliente("Paula")

    private val p1 = Produto("Play Station 4", 1200.0)
    private val p2 = Produto("XBox 360", 1300.0)
    private val p3 = Produto("Nintendo Switch", 2000.0)
    private val p4 = Produto("Play Station 3", 900.0)
    private val p5 = Produto("Play Station 4 Pro", 2400.0)

    private val l1 = Loja("Game Center")
    private val l2 = Loja("Gamers")
    private val l3 = Loja("XR3")
    private val l4 = Loja("Tech games & consoles")

    // Lista de todos os clientes
    private val listClientes = listOf(gabriel, marcos, daniela, alex, johnathan, aurelio, fernando, amanda, paula)
    private val listProdutos = listOf(p1, p2, p3, p4, p5)
    private val listLojas = listOf(l1, l2, l3, l4)
    private val listPedidos = listOf(
        Pedido(listOf(p1), gabriel, l1),
        Pedido(listOf(p1, p2, p5), marcos, l2),
        Pedido(listOf(p1, p2, p4, p5), gabriel, l1),
        Pedido(listOf(p2, p5), alex, l2),
        Pedido(listOf(p2, p4), alex, l1),
        Pedido(listOf(p1, p2, p3, p4, p5), fernando, l2),
        Pedido(listOf(p3, p4), amanda, l3),
        Pedido(listOf(p1, p2), paula, l3),
        Pedido(listOf(p1), johnathan, l3),
        Pedido(listOf(p3, p4, p5), paula, l4),
        Pedido(listOf(p5), marcos, l3)
    )

    fun clientes() = listClientes
    fun produtos() = listProdutos
    fun pedidos() = listPedidos
}

package exercices.collection

fun main() {

    val bancoDeDados = BaseDados()
    val pedidos = bancoDeDados.pedidos()

    // Quantos clientes existem cadastrados?
    println("Existem ${bancoDeDados.clientes().count()} clientes cadastrados.")

    // Quantos produtos?
    println("Existem ${bancoDeDados.produtos().count()} produtos cadastrados.")

    // Produto mais caro?
    println("O produto mais caro é: ${bancoDeDados.produtos().maxBy { it.preco }?.nome}")

    // Produto mais barato?
    println("O produto mais barato é: ${bancoDeDados.produtos().minBy { it.preco }?.nome}")

    // Qual a média de produtos por pedido?
    println("A média de produtos por pedido é ${pedidos.map { it.produtos.count() }.average()}")

    // O produto Play Station 4 Pro foi vendido? Quantas vezes?
    val vendido = pedidos.any { wasSold(it.produtos, "Play Station 4 Pro") }
    val vendidoQuantidade = pedidos.count { wasSold(it.produtos, "Play Station 4 Pro") }

    println("Produto foi vendido: ${if (vendido) "Sim" else "Não"}")
    println("Vendido: $vendidoQuantidade vezes.")

    // Cliente com mais pedidos?
    pedidos.forEach { clientePedido(it) }
    println(clientesVendas)

}

var clientesVendas: HashMap<String, Int> = HashMap()

fun wasSold(list: List<Produto>, nome: String): Boolean {
    return list.filter { it.nome == nome }.any()
}

fun clientePedido(item: Pedido) {
    if (clientesVendas[item.cliente.nome] != null) {
        clientesVendas[item.cliente.nome] = clientesVendas[item.cliente.nome]!!.toInt() + item.produtos.count()
    } else {
        clientesVendas[item.cliente.nome] = item.produtos.count()
    }
}